#!/usr/bin/env node

var webserver = {};

webserver.vars = {
  server: null,
  port: 3000
}

webserver.start = function(customPort) {
  /**
   * Module dependencies.
   */

  purgeCache('../app');
  var app = require('../app');
  var debug = require('debug')('webserver:server');
  var http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  webserver.vars.port = normalizePort(process.env.PORT || customPort);
  app.set('port', webserver.vars.port);

  /**
   * Create HTTP server.
   */

  webserver.vars.server = http.createServer(app);
  webserver.vars.server = require('http-shutdown')(webserver.vars.server);

  /**
   * Listen on provided port, on all network interfaces.
   */

  webserver.vars.server.on('error', onError);
  webserver.vars.server.on('listening', onListening);

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = webserver.vars.server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

  console.log('Webserver - Started!');

  return app
}

webserver.listen = function() {
  webserver.vars.server.listen(webserver.vars.port);
  console.log('Webserver - Listening on port "' + webserver.vars.port + '"');
}

webserver.shutdown = (callback) => {
  console.log('Webserver - Shutting down ...');
  webserver.vars.server.shutdown(() => {
    console.log('Webserver - We closed!');
    if (callback !== undefined) {
      callback()
    }
  });
}

webserver.reload = (callback) => {
  webserver.shutdown(() => {
    webserver.start(webserver.vars.port);
    if (callback !== undefined) {
      callback()
    }
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Removes a module from the cache
 */
function purgeCache(moduleName) {
    // Traverse the cache looking for the files
    // loaded by the specified module name
    searchCache(moduleName, function (mod) {
        delete require.cache[mod.id];
    });

    // Remove cached paths to the module.
    // Thanks to @bentael for pointing this out.
    Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
        if (cacheKey.indexOf(moduleName)>0) {
            delete module.constructor._pathCache[cacheKey];
        }
    });
};

/**
 * Traverses the cache to search for all the cached
 * files of the specified module name
 */
function searchCache(moduleName, callback) {
    // Resolve the module identified by the specified name
    var mod = require.resolve(moduleName);

    // Check if the module has been resolved and found within
    // the cache
    if (mod && ((mod = require.cache[mod]) !== undefined)) {
        // Recursively go over the results
        (function traverse(mod) {
            // Go over each of the module's children and
            // traverse them
            mod.children.forEach(function (child) {
                traverse(child);
            });

            // Call the specified callback providing the
            // found cached module
            callback(mod);
        }(mod));
    }
};

module.exports = webserver;
